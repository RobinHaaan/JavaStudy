一、抽象方法
使用abstract修饰的方法，没有方法体，只有声明。定义的是一种“规范”，就是告诉子类必须要给抽象方法提供具体的实现。
二、抽象类
包含抽象方法的类就是抽象类。
通过abstract方法定义规范，然后要求子类必须定义具体实现。通过抽象类，我们就可以做到严格限制子类的设计，使子类之间更加通用。
三、抽象类的使用要点
1.有抽象方法的类只能定义成抽象类
2.抽象类不能实例化，即不能用new来实例化抽象类
3.抽象类可以包含属性、方法、构造方法。但是构造方法不能用来new实例，只能用来被子类调用
4.抽象类只能用来被继承。
5.抽象方法必须被子类实现。

四、接口
1.接口就是比“抽象类”还“抽象”的“抽象类”，可以更加规范的对子类进行约束。全面地专业地实现了：规范和具体实现的分离。
2.接口的本质
接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则你必须能……”的思想。
五、定义接口的详细说明
声明格式：
[访问修饰符] interface 接口名 [extends 父接口1， 父接口2……]{
	常量定义;
	方法定义;
}
1.访问修饰符：只能是public或默认
2.接口类：和类名采用相同命名机制
3.extends：接口可以多继承
4.常量：接口中的属性只能是常量。总是用public static final修饰，所以你不需要写修饰词，默认也是public static final
5.方法：接口中的方法只能是public abstract

六、要点
1.子类通过implements来实现接口中的规范
2.接口不能创建实例，但可用于声明引用变量类型。
3.一个类实现了接口，必须实现接口中所有的方法，并且这些方法只能是public的
4.JDK1.7之前，接口中只能包含静态常量、抽象方法，不能有普通属性、构造方法、普通方法。
5.JDK1.8之后，接口中包含普通的静态方法


七、区别
1.普通类：具体实现
2.抽象类：具体实现，规范（抽象方法）
3.接口：规范！