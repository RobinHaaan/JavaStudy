在Java中内部类主要分为成员内部类（非静态内部类、静态内部类）、匿名内部类、局部内部类。
一、成员内部类
成员内部类可以使用private、default、protected、public任意进行修饰。类文件名为：外部类$内部类.class
二、非静态内部类
在外部类内使用非静态内部类和平时使用其他类没什么不同
1.非静态内部类必须寄存在一个外部类的对象里。因此，如果有一个非静态内部类对象那么一定存在对应的外部类对象。非静态内部类对象单独属于外部类的某个对象。
创建静态内部类例子：Outer.Inner inner = new Outer().new Inner();
2.非静态内部类可以直接访问外部类成员，但是外部类不能直接访问非静态内部类成员。
3.非静态内部类不能有静态方法，静态属性和静态初始化块。
4.外部类的静态方法，静态代码块不能访问非静态内部类，包括不能使用非静态内部类定义变量、创建实例。
5.访问变量方法
	(1)内部类里方法的局部变量：变量名
	(2)内部类属性：this.变量名
	(3)外部类属性：外部类名.this.变量名
	
三、静态内部类
1.定义方式
Outer2.Inner2 inner2 = new Outer2.Inner2();
2.当一个静态内部类对象存在，并不一定存在对应的外部类对象。因此，静态内部类的实例方法不能直接访问外部类的实例方法。
3.静态内部类看做外部类的一个静态成员。因此，外部类的方法中可以通过：“静态内部类.名字”的方式访问静态内部类的静态成员，通过new静态内部类()访问静态内部类的实例。
四、匿名内部类
1.适合哪种只需要使用一次的类。如：键盘监听操作等等。
2.匿名内部类没有访问修饰符
3.匿名内部类没有构造方法。因为它连名字都没有。
五、局部内部类
1.局部内部类定义在方法内部，作用域仅限于本方法，称为局部内部类。
2.局部内部类的使用主要是用来解决比较复杂的问题，想创建一个类来辅助我们的解决方案，但是又不希望这个类是公共可用的，所以就产生了局部内部类。局部内部类和成员内部类一样被编译，但是它的作用域仅限于该方法。